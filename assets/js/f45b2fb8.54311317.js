"use strict";(self.webpackChunkgiveth_docs=self.webpackChunkgiveth_docs||[]).push([[7754],{3159:(e,t,i)=>{i.d(t,{Ay:()=>o,RM:()=>a});var n=i(4848),s=i(8453);const a=[];function r(e){const t={a:"a",em:"em",hr:"hr",p:"p",strong:"strong",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:(0,n.jsxs)(t.strong,{children:["Giveth TRACE has officially been deprecated. After 5 years of faithful service, Giveth and its platform, services and products have fully migrated to ",(0,n.jsx)(t.a,{href:"https://giveth.io",children:"Giveth.io"}),". With the deprecation of the Rinkeby network and low user activity, the Giveth DAO decided to sunset its original dApp in Q3 of 2022. The code has and will forever be open-source, and you can find it in ",(0,n.jsx)(t.a,{href:"https://github.com/Giveth",children:"Giveth's Github repositories"}),"."]})})}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.em,{children:(0,n.jsx)(t.strong,{children:"This documentation will remain available for historical reference."})})}),"\n",(0,n.jsx)(t.hr,{})]})}function o(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(r,{...e})}):r(e)}},9335:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>h,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"bridgeSecurity","title":"Giveth Bridge Security Implementation","description":"A technical overview of the features, roles and theory behind the security of the Giveth Bridge.","source":"@site/dapps/bridgeSecurity.md","sourceDirName":".","slug":"/dapps/bridgeSecurity","permalink":"/dapps/bridgeSecurity","draft":false,"unlisted":false,"editUrl":"https://github.com/giveth/giveth-docs/edit/master/dapps/bridgeSecurity.md","tags":[],"version":"current","lastUpdatedBy":"Mitch Oz","lastUpdatedAt":1667254190000,"frontMatter":{"id":"bridgeSecurity","title":"Giveth Bridge Security Implementation","slug":"dapps/bridgeSecurity"}}');var s=i(4848),a=i(8453),r=i(6025),o=i(3159);const h={id:"bridgeSecurity",title:"Giveth Bridge Security Implementation",slug:"dapps/bridgeSecurity"},d=void 0,c={},l=[...o.RM,{value:"A technical overview of the features, roles and theory behind the security of the Giveth Bridge.",id:"a-technical-overview-of-the-features-roles-and-theory-behind-the-security-of-the-giveth-bridge",level:4},{value:"What is the Giveth Bridge, exactly?",id:"what-is-the-giveth-bridge-exactly",level:3},{value:"How does it work?",id:"how-does-it-work",level:3},{value:"Security Roles",id:"security-roles",level:2},{value:"Mainnet Owner",id:"mainnet-owner",level:3},{value:"Mainnet Funding and EscapeHatch Destination",id:"mainnet-funding-and-escapehatch-destination",level:3},{value:"Security Guard",id:"security-guard",level:3},{value:"Mainnet EscapeHatchCaller",id:"mainnet-escapehatchcaller",level:3},{value:"Allowed Spenders",id:"allowed-spenders",level:3},{value:"ForeignGivethBridge Owner",id:"foreigngivethbridge-owner",level:3},{value:"Rinkeby DappGod Multisig",id:"rinkeby-dappgod-multisig",level:3},{value:"Rinkeby EscapeHatchCaller",id:"rinkeby-escapehatchcaller",level:3},{value:"Possible Security Issue Scenarios",id:"possible-security-issue-scenarios",level:2}];function u(e){const t={code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.Ay,{}),"\n",(0,s.jsx)(t.h4,{id:"a-technical-overview-of-the-features-roles-and-theory-behind-the-security-of-the-giveth-bridge",children:"A technical overview of the features, roles and theory behind the security of the Giveth Bridge."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.em,{children:"This document assumes that the reader has basic knowledge of smart contracts, multisig contracts and Ethereum testnet chains."})}),"\n",(0,s.jsx)(t.h3,{id:"what-is-the-giveth-bridge-exactly",children:"What is the Giveth Bridge, exactly?"}),"\n",(0,s.jsx)(t.p,{children:"The bridge has 3 parts: A contract on the Ethereum Mainnet, a contract on the Rinkeby Testnet, and an off-chain service that connects these two contracts. The off-chain service listens for events from these contracts and relays commands from one contract to the other."}),"\n",(0,s.jsx)("img",{id:"contentimg",alt:"Giveth TRACE Bridge Flow",src:(0,r.Ay)("img/content/trace/givethbridge.png")}),"\n",(0,s.jsx)(t.h3,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,s.jsx)(t.p,{children:"The Giveth Bridge contract on mainnet is simply a vault contract with 1 extra security measure and a few modifications to make it function as a bridge. Payments are only paid out under certain conditions. Every bridge payment has a standard 48-hour time lockout before payment can occur."}),"\n",(0,s.jsx)(t.p,{children:"During this time, the Security Guard has the ability to delay a payment further than the standard 48 hours - up to 30 days. This allows time to determine whether or not a payment needs to be cancelled. No payments can be issued without a check-in from the Security Guard happening XX minutes after the payment was requested. This check-in will happen daily so as not to delay authorized payments."}),"\n",(0,s.jsxs)(t.p,{children:["There is also an ",(0,s.jsx)(t.code,{children:"escapeHatch"})," that can be called by an ",(0,s.jsx)(t.code,{children:"escapeHatchCaller"})," to send the funds in the bridge to the funding multisig during the 48 hour delay, or any additional delay generated by the Security Guard."]}),"\n",(0,s.jsxs)(t.p,{children:["This funding multisig will for some time also hold funds to diversify risk between the Bridge contract and the Consensus Multisig contract, when the bridge is holding too much value the funding multisig will ",(0,s.jsx)(t.code,{children:"escapeFunds()"})," out of the bridge and when the bridge is getting low, the funding multisig will manually top it off."]}),"\n",(0,s.jsx)(t.p,{children:"Donations and withdrawals will happen directly out of the bridge. When a donation is made to the bridge, a token is created by the TokenFactory (at 1:1 ETH) and sent to LiquidPledging, where the decisions are made about spending. When a payment is called for, tokens are sent from Liquid Pledging and burned by the ForeignGivethBridge, at which point the command is issued back across the Ghetto Bridge using the Bridge Key to the Giveth Bridge to issue a payment."}),"\n",(0,s.jsx)(t.p,{children:"In case for some reason the bridge goes down, the listener service will issue alarms to notify of a service interruption. The listener service will also create an alarm if tokens are created without a corresponding donation, or if tokens are not created at the time of a donation."}),"\n",(0,s.jsx)(t.h2,{id:"security-roles",children:"Security Roles"}),"\n",(0,s.jsx)(t.h3,{id:"mainnet-owner",children:"Mainnet Owner"}),"\n",(0,s.jsx)(t.p,{children:"This is the Giveth multisig that can issue control commands to the bridge. They can cancel any payment and can boot the Security Guard or remove the approved spender (bridge key)."}),"\n",(0,s.jsx)(t.h3,{id:"mainnet-funding-and-escapehatch-destination",children:"Mainnet Funding and EscapeHatch Destination"}),"\n",(0,s.jsx)(t.p,{children:"This multisig is used to both send funds to the Mainnet Bridge (Vault) and act as the destination for the EscapeHatch Call."}),"\n",(0,s.jsx)(t.h3,{id:"security-guard",children:"Security Guard"}),"\n",(0,s.jsx)(t.p,{children:"Keeps watch over all requested payments, checks in each day, and delays suspicious payments."}),"\n",(0,s.jsx)(t.h3,{id:"mainnet-escapehatchcaller",children:"Mainnet EscapeHatchCaller"}),"\n",(0,s.jsx)(t.p,{children:"This is a 1 of x multisig that can trigger the vault to dump its funds to a predetermined wallet. We have people that are scattered across the world, multiple points of contacts that can do this."}),"\n",(0,s.jsx)(t.h3,{id:"allowed-spenders",children:"Allowed Spenders"}),"\n",(0,s.jsx)(t.p,{children:"These addresses are a whitelist who can issue a payment request to the bridge contract. In the application the bridge key is the only Allowed Spender."}),"\n",(0,s.jsx)(t.h3,{id:"foreigngivethbridge-owner",children:"ForeignGivethBridge Owner"}),"\n",(0,s.jsx)(t.p,{children:"The bridge key."}),"\n",(0,s.jsx)(t.h3,{id:"rinkeby-dappgod-multisig",children:"Rinkeby DappGod Multisig"}),"\n",(0,s.jsxs)(t.p,{children:["This multisig controls updates and has total access to control the ForeignGivethBridge. It also acts as the ",(0,s.jsx)(t.code,{children:"escapeHatchDestination"})," for the ForeignGivethBridge and Liquid Pledging."]}),"\n",(0,s.jsx)(t.h3,{id:"rinkeby-escapehatchcaller",children:"Rinkeby EscapeHatchCaller"}),"\n",(0,s.jsx)(t.p,{children:"This is a 1 of x multisig that can trigger the ForeignGivethBridge and Liquid Pledging contracts to dump their tokens to a predetermined wallet."}),"\n",(0,s.jsx)(t.h2,{id:"possible-security-issue-scenarios",children:"Possible Security Issue Scenarios"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Bridge Key is compromised:"}),"\nA hacker could use bridge key to create transactions sending ETH to their own address to force transactions through. The Security Guard can delay these payments long enough for the owner multisig to cancel the payment and remove the compromised key on Mainnet."]}),"\n",(0,s.jsx)(t.p,{children:"They could also create GivETH tokens as the token controller on the rinkeby side. The listener service would catch this though and sound the alarm any time GivETH tokens are generated without a corresponding Ether donation. (also sounds an alarm if the bridge key service decided to take a nap and doesn\u2019t create GivETH tokens when a donation is received.)"}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Owner multisig has a bug and is able to be taken over (like the parity hack) or 6 keys out of 11 of the keys are compromised:"}),"\nThis is highly unlikely but if this happens there will be no loss of funds. This multisig doesn't hold any funds, it only controls the bridge. Tt could reduce the 48 hour delay to 25 hours, the Security Guard can still delay any payments but the Security Guard can be replaced by the owner. Funds could be escaped within the 25 hours in this scenario."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"EscapeHatchCaller keys get compromised:"}),"\nIn this case the worst thing that can happen is that the flow of the DApp on Rinkeby can be disrupted. This can be repaired however, by removing the compromised key on the EscapeHatch 1 of x multisig, and DAppGod. Once that is done then simply sending the giveth tokens back to the address from which they came, a similar scenario is possible on Mainnet. The EscapeHatch Caller can only move money to an escape destination, and nowhere else. If a key is compromised the worst thing they can do is to remove all owners and themselves from the EscapeHatch multisig, but the owner 6 of 11 multisig on main net can still call the EscapeHatch and can replace the EscapeHatch caller and the 3 of 5 multisig on rinkeby can as well."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Funding multisig has a bug and is able to be taken over (like the parity hack) or 4 keys out of 7 of the keys are compromised:"}),"\nThis is extremely unlikely but if this happens there will be a loss of funds. The loss however, would not be catastrophic as funds are split between the bridge and the multisig."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Bridge on mainnet has a bug that lets someone else take over as owner:"}),"\nThe 48 hour delay can be only be reduced to 25 hours Security Guard can still delay any payments but the Security Guard can be replaced by the owner. Funds could be escaped within 25 hours in this scenario."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"DAppGod Multisig on the testnet decides to take over:"}),"\nIf this were to occur, the EscapeHatch from the bridge would prevent any loss of funds, and the testnet set up could be manually redeployed."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"What if the Security Guard\u2019s key and Bridge Key Controller both get compromised (or their holders collude to steal funds)"}),":\nThe Owner multisig can cancel payments and extend the time delay to longer than 48 hours. In this scenario though they probably wouldn't have to because the bridge funds can be escaped to the funding multisig. This is the only scenario that could be a serious risk to the funds in the bridge vault. This could be averted within 48 hours of the event starting because of the default delay and that funds can be escaped during that period."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Finally, what if the Event Listener falls off-line just previous to any of the aforementioned attacks that trigger alarms on compromise?"}),"\nThe Security Guard should see any suspicious transactions and be able to delay payments until they are dealt with."]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>r,x:()=>o});var n=i(6540);const s={},a=n.createContext(s);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);